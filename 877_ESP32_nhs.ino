#include "PxMatrix.h"

#ifdef ESP32

#define P_LAT 22
#define P_A 19
#define P_B 23
#define P_C 18
#define P_D 5
#define P_E 15
#define P_OE 2
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

#endif

#ifdef ESP8266

#include <Ticker.h>
Ticker display_ticker;
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

#endif
// Pins for LED MATRIX

#define matrix_width 64
#define matrix_height 32

// This defines the 'on' time of the display is us. The larger this number,
// the brighter the display. If too large the ESP will crash
uint8_t display_draw_time=50; //10-50 is usually fine

// PxMATRIX display(matrix_width,matrix_height,P_LAT, P_OE,P_A,P_B,P_C);
//PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);
PxMATRIX display(matrix_width,matrix_height,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};


// Converted using the following site: http://www.rinkydinkelectronics.com/t_imageconverter565.php
uint16_t static nhs[] = {
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02F6, 0x02F6,   // 0x0060 (96) pixels
0x02F6, 0x02F6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0000,   // 0x0070 (112) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02D6, 0x02D6, 0x02B6, 0x02B6, 0x02B6, 0x02D6, 0x02D6, 0x02F6, 0x02F6, 0x0000,   // 0x0080 (128) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0296, 0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x02D6, 0x02F6, 0x0000,   // 0x0090 (144) pixels
0x0000, 0x0000, 0x0000, 0x02F6, 0x02B6, 0x0276, 0x0276, 0x0276, 0x0276, 0x02B6, 0x02F6, 0x0000, 0x0255, 0x0276, 0x0276, 0x0276,   // 0x00A0 (160) pixels
0x0276, 0x0276, 0x02D6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02D6, 0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x02B6, 0x02F6,   // 0x00B0 (176) pixels
0x0000, 0x0000, 0x0000, 0x02F6, 0x0296, 0x0276, 0x02F7, 0x3418, 0x4C79, 0x5499, 0x4459, 0x33F8, 0x0B37, 0x0276, 0x0296, 0x02D6,   // 0x00C0 (192) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0276, 0xE77E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x3C39, 0x02D6, 0x0000,   // 0x00D0 (208) pixels
0x0000, 0x0000, 0x0000, 0x0296, 0x9E1C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAE5C, 0x0276, 0x0000, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00E0 (224) pixels
0xFFFF, 0xFFFF, 0x3C18, 0x02D6, 0x0000, 0x0000, 0x0000, 0x02D6, 0x0B17, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x753A, 0x02B6,   // 0x00F0 (240) pixels
0x0000, 0x0000, 0x02B6, 0x0296, 0x859B, 0xF7DF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBE9D, 0x2398,   // 0x0100 (256) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0276, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8DBB, 0x0296, 0x0000,   // 0x0110 (272) pixels
0x0000, 0x0000, 0x0000, 0x0276, 0xDF3E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x755B, 0x0000, 0x0255, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0120 (288) pixels
0xFFFF, 0xFFFF, 0x02F6, 0x02D6, 0x0000, 0x0000, 0x0000, 0x02D6, 0x3C39, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x3C39, 0x02D6,   // 0x0130 (304) pixels
0x0000, 0x0296, 0x33F8, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5CBA,   // 0x0140 (320) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x02D6, 0x1357, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF3E, 0x0276, 0x0000,   // 0x0150 (336) pixels
0x0000, 0x0000, 0x02F6, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x3C39, 0x0000, 0x0255, 0xAE7D, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0160 (352) pixels
0xFFFF, 0xFFFF, 0x0255, 0x02F6, 0x0000, 0x0000, 0x0000, 0x02B6, 0x753B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0317, 0x0000,   // 0x0170 (368) pixels
0x02B6, 0x33F8, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02D6,   // 0x0180 (384) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x02B6, 0x4C79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0276, 0x02F6,   // 0x0190 (400) pixels
0x0000, 0x0000, 0x02D6, 0x02F6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0317, 0x0000, 0x0255, 0xE77E, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01A0 (416) pixels
0xFFFF, 0xD73E, 0x0276, 0x0000, 0x0000, 0x0000, 0x0000, 0x0296, 0xAE5C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000,   // 0x01B0 (432) pixels
0x0296, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9F, 0x0255,   // 0x01C0 (448) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0296, 0x859B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x33F8, 0x02D6,   // 0x01D0 (464) pixels
0x0000, 0x0000, 0x02D6, 0x33F8, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x01E0 (480) pixels
0xFFFF, 0xA61C, 0x0296, 0x0000, 0x0000, 0x0000, 0x0000, 0x0276, 0xDF5E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF3E, 0x0235, 0x0000,   // 0x01F0 (496) pixels
0x7D5B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF3E, 0xCEFE, 0xD71E, 0xFFFF, 0xFFFF, 0xFFFF, 0x95FC, 0x0296,   // 0x0200 (512) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0296, 0xBE9D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x7D7B, 0x02B6,   // 0x0210 (528) pixels
0x0000, 0x0000, 0x02B6, 0x6D1A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF3E, 0x0255, 0x0000, 0x0B37, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0220 (544) pixels
0xFFFF, 0x6D1A, 0x02B6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA63C, 0x0000, 0x0215,   // 0x0230 (560) pixels
0xE77E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5CDA, 0x0255, 0x0276, 0x0276, 0x0276, 0x0255, 0x1357, 0xAE5C, 0x4C79, 0x02D6,   // 0x0240 (576) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0256, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEFE, 0x0276,   // 0x0250 (592) pixels
0x0000, 0x0000, 0x0296, 0x9E1C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA63C, 0x0255, 0x0000, 0x4459, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0260 (608) pixels
0xFFFF, 0x3418, 0x02D6, 0x0000, 0x0000, 0x0000, 0x02D6, 0x0B17, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6D1A, 0x0000, 0x0235,   // 0x0270 (624) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEDD, 0x0235, 0x02F6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02D6, 0x0296, 0x02D6, 0x0000,   // 0x0280 (640) pixels
0x0000, 0x0000, 0x0000, 0x02F6, 0x0276, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255,   // 0x0290 (656) pixels
0x02F6, 0x0000, 0x0276, 0xD71E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6D1A, 0x0000, 0x0255, 0x7D5B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02A0 (672) pixels
0xFFFF, 0x02F6, 0x02D6, 0x0000, 0x0000, 0x0000, 0x02D6, 0x3C39, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x33F8, 0x0000, 0x02D6,   // 0x02B0 (688) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAE7D, 0x0276, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02C0 (704) pixels
0x0000, 0x0000, 0x0000, 0x02D6, 0x2398, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF5E, 0xDF5E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2398,   // 0x02D0 (720) pixels
0x02D6, 0x02F6, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x33F8, 0x0000, 0x0255, 0xB67D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x02E0 (736) pixels
0xFFFF, 0x0255, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0296, 0x753A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02F6, 0x0000, 0x0B17,   // 0x02F0 (752) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0317, 0x0296, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0300 (768) pixels
0x0000, 0x0000, 0x0000, 0x02B6, 0x54BA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xAE5D, 0x95DC, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6D3A,   // 0x0310 (784) pixels
0x02B6, 0x02F6, 0x02D6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02D6, 0x0000, 0x0255, 0xE77F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0320 (800) pixels
0xD71E, 0x0276, 0x02D6, 0x02D6, 0x02D6, 0x02D6, 0x0276, 0xAE5C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000, 0x0296,   // 0x0330 (816) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64FA, 0x0276, 0x02B6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0340 (832) pixels
0x0000, 0x0000, 0x0000, 0x0296, 0x8DDB, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x859B, 0x4C79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBEBD,   // 0x0350 (848) pixels
0x0296, 0x02D6, 0x2BF8, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0360 (864) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD73E, 0x0276, 0x0000, 0x0276,   // 0x0370 (880) pixels
0xEFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x54BA, 0x0276, 0x02D6, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0380 (896) pixels
0x0000, 0x0000, 0x0000, 0x0276, 0xC6DD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x54B9, 0x02F6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0390 (912) pixels
0x0255, 0x02B6, 0x64FA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCF1E, 0x0255, 0x0000, 0x1357, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03A0 (928) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xA61C, 0x0296, 0x0000, 0x02B6,   // 0x03B0 (944) pixels
0x5CDA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xE77F, 0x02F7, 0x02B6, 0x0000, 0x0000, 0x0000,   // 0x03C0 (960) pixels
0x0000, 0x0000, 0x0000, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x23B8, 0x0235, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03D0 (976) pixels
0x1357, 0x0276, 0x9DFC, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9DFC, 0x0000, 0x0256, 0x4459, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x03E0 (992) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6D1A, 0x02B6, 0x0000, 0x02F6,   // 0x03F0 (1008) pixels
0x0255, 0xC6DD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0317, 0x02D6, 0x0000, 0x0000,   // 0x0400 (1024) pixels
0x0000, 0x0000, 0x02F6, 0x02B6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02B6, 0x0276, 0xB67D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0410 (1040) pixels
0x64DA, 0x0235, 0xCEFE, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64DA, 0x0000, 0x0256, 0x7D7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0420 (1056) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x33F8, 0x02D6, 0x0000, 0x0000,   // 0x0430 (1072) pixels
0x02F6, 0x0275, 0x8DDC, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xEF9F, 0x0255, 0x02F6, 0x0000,   // 0x0440 (1088) pixels
0x0000, 0x0000, 0x02D6, 0x2BD8, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x02B6, 0x64DA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0450 (1104) pixels
0xAE5D, 0x01F5, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2BD8, 0x0000, 0x0256, 0xB67D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0460 (1120) pixels
0xDF5E, 0xE77E, 0xE77E, 0xE77E, 0xE77E, 0xDF5E, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02F6, 0x0000, 0x0000, 0x0000,   // 0x0470 (1136) pixels
0x0000, 0x02F6, 0x0276, 0x1357, 0xBEBD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x33F8, 0x02D6, 0x0000,   // 0x0480 (1152) pixels
0x0000, 0x0000, 0x02B6, 0x64FA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEFE, 0x0276, 0x02D6, 0x1357, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0490 (1168) pixels
0xFFFF, 0x0215, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02B6, 0x0000, 0x0255, 0xEF9F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEFE,   // 0x04A0 (1184) pixels
0x01F5, 0x0276, 0x0276, 0x0276, 0x0276, 0x01F5, 0xAE5C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000, 0x0000, 0x0000,   // 0x04B0 (1200) pixels
0x0000, 0x0000, 0x0000, 0x02D6, 0x0276, 0x1357, 0xD73E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x95DC, 0x0296, 0x0000,   // 0x04C0 (1216) pixels
0x0000, 0x0000, 0x0296, 0x9DFC, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x95FC, 0x0296, 0x02F6, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x04D0 (1232) pixels
0xFFFF, 0x2BD8, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9DFC,   // 0x04E0 (1248) pixels
0x0296, 0x0000, 0x0000, 0x0000, 0x0000, 0x0276, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD71E, 0x0276, 0x0000, 0x0000, 0x0000,   // 0x04F0 (1264) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02D6, 0x0235, 0xB69D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBEBD, 0x0296, 0x0000,   // 0x0500 (1280) pixels
0x0000, 0x0000, 0x0276, 0xD71E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64FA, 0x02B6, 0x0000, 0x0296, 0xB69D, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0510 (1296) pixels
0xFFFF, 0xB69D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC6DD, 0x0276, 0x0000, 0x1357, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64FA,   // 0x0520 (1312) pixels
0x02B6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0276, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9E1C, 0x0296, 0x0000, 0x0000, 0x0000,   // 0x0530 (1328) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02D6, 0x02F7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xC6DD, 0x0276, 0x0000,   // 0x0540 (1344) pixels
0x0000, 0x02F6, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2BF8, 0x02D6, 0x0000, 0x02B6, 0x6D1A, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0550 (1360) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8DDB, 0x0276, 0x0000, 0x4C79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2BD8,   // 0x0560 (1376) pixels
0x02D6, 0x0000, 0x0000, 0x0000, 0x02D6, 0x1B77, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6D1A, 0x02B6, 0x0000, 0x0000, 0x0000,   // 0x0570 (1392) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02B6, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xB69D, 0x0296, 0x0000,   // 0x0580 (1408) pixels
0x0000, 0x02D6, 0x02F7, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02D6, 0x02F6, 0x0000, 0x02D6, 0x1B77, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0590 (1424) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x5CBA, 0x0000, 0x0276, 0x7D7B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02B6,   // 0x05A0 (1440) pixels
0x02F6, 0x0000, 0x0000, 0x0000, 0x02B6, 0x5499, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x33F8, 0x0000, 0x02B6, 0x0317, 0x0276,   // 0x05B0 (1456) pixels
0x02D6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0276, 0x5499, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x8DBB, 0x0296, 0x0000,   // 0x05C0 (1472) pixels
0x0000, 0x02D6, 0x3418, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x02F6, 0x0000, 0x02F6, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x05D0 (1488) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2398, 0x0000, 0x0276, 0xB67D, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255,   // 0x05E0 (1504) pixels
0x02F6, 0x0000, 0x0000, 0x0000, 0x0296, 0x859B, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x02D6, 0x0000, 0x0255, 0xFFFF, 0xB67D,   // 0x05F0 (1520) pixels
0x33F8, 0x0296, 0x0255, 0x0276, 0x0255, 0x0296, 0x5CDA, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x3C18, 0x02D6, 0x0000,   // 0x0600 (1536) pixels
0x0000, 0x02B6, 0x6D1A, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD71E, 0x0276, 0x0000, 0x0000, 0x0000, 0x0276, 0xBEBD, 0xFFFF, 0xFFFF,   // 0x0610 (1552) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0296, 0x0000, 0x0256, 0xEF9F, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xCEFE, 0x0276,   // 0x0620 (1568) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0296, 0xBEBD, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x0000, 0x02B6, 0xFFFF, 0xFFFF,   // 0x0630 (1584) pixels
0xFFFF, 0xFFFF, 0xF7BF, 0xDF5E, 0xEFBF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0255, 0x02F6, 0x0000,   // 0x0640 (1600) pixels
0x0000, 0x0296, 0xA63C, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9E1C, 0x0296, 0x0000, 0x0000, 0x0000, 0x02B6, 0x753A, 0xFFFF, 0xFFFF,   // 0x0650 (1616) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xF7DF, 0x0255, 0x0000, 0x0276, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x95FC, 0x0296,   // 0x0660 (1632) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0256, 0xF7BF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xD71E, 0x0255, 0x0000, 0x4459, 0xFFFF, 0xFFFF,   // 0x0670 (1648) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x4C79, 0x02B6, 0x0000, 0x0000,   // 0x0680 (1664) pixels
0x0000, 0x0276, 0xDF5E, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x6D1A, 0x02B6, 0x0000, 0x0000, 0x0000, 0x02D6, 0x1B98, 0xFFFF, 0xFFFF,   // 0x0690 (1680) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xBEBD, 0x0276, 0x0000, 0x1357, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64DA, 0x02B6,   // 0x06A0 (1696) pixels
0x0000, 0x0000, 0x0000, 0x02F6, 0x0276, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9E1C, 0x0235, 0x0000, 0x95DC, 0xFFFF, 0xFFFF,   // 0x06B0 (1712) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x95DC, 0x0276, 0x02F6, 0x0000, 0x0000,   // 0x06C0 (1728) pixels
0x0000, 0x0255, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x3C18, 0x02D6, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0255, 0xFFFF, 0xFFFF,   // 0x06D0 (1744) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x859B, 0x0000, 0x0276, 0x4C79, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x2BD8, 0x02D6,   // 0x06E0 (1760) pixels
0x0000, 0x0000, 0x0000, 0x02D6, 0x1B98, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64FA, 0x0235, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x06F0 (1776) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x64DA, 0x0256, 0x02F6, 0x0000, 0x0000, 0x0000,   // 0x0700 (1792) pixels
0x0000, 0x0B37, 0xFFFF, 0xEF9F, 0xEF9F, 0xEF9F, 0xFFFF, 0x0317, 0x02D6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0296, 0xB67D, 0xF7BF,   // 0x0710 (1808) pixels
0xEF9F, 0xEF9F, 0xEF9F, 0xEF9F, 0xFFFF, 0x4C79, 0x0000, 0x0276, 0x755B, 0xF7DF, 0xEF9F, 0xEF9F, 0xEF9F, 0xFFFF, 0x02D6, 0x02F6,   // 0x0720 (1824) pixels
0x0000, 0x0000, 0x0000, 0x02D6, 0x4C79, 0xFFFF, 0xEF9F, 0xEF9F, 0xEF9F, 0xFFFF, 0x2BD8, 0x02B6, 0x0000, 0x02F7, 0x6D3A, 0xC6DD,   // 0x0730 (1840) pixels
0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xDF5E, 0x755B, 0x02B6, 0x0296, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0740 (1856) pixels
0x0000, 0x02F6, 0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x02D6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x0296, 0x0276,   // 0x0750 (1872) pixels
0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x02D6, 0x0000, 0x02F6, 0x02B6, 0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x02F6, 0x02F7,   // 0x0760 (1888) pixels
0x0000, 0x0000, 0x0000, 0x02F6, 0x02D6, 0x0276, 0x0276, 0x0276, 0x0276, 0x0276, 0x02D6, 0x02F6, 0x0000, 0x02D6, 0x02B6, 0x0276,   // 0x0770 (1904) pixels
0x0276, 0x02F7, 0x23B8, 0x3C19, 0x33F8, 0x1B77, 0x0296, 0x0276, 0x02B6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0780 (1920) pixels
0x0000, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02F6,   // 0x0790 (1936) pixels
0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0000, 0x0000, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F7, 0x0000,   // 0x07A0 (1952) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x02F6,   // 0x07B0 (1968) pixels
0x02F6, 0x02D6, 0x02D6, 0x02D6, 0x02D6, 0x02D6, 0x02F6, 0x02F6, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07C0 (1984) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07D0 (2000) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07E0 (2016) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07F0 (2032) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0800 (2048) pixels
};





#ifdef ESP8266
// ISR for display refresh
void display_updater()
{
  display.display(display_draw_time);
}
#endif

#ifdef ESP32
void IRAM_ATTR display_updater(){
  // Increment the counter and set the time of ISR
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}
#endif


void display_update_enable(bool is_enable)
{

#ifdef ESP8266
  if (is_enable)
    display_ticker.attach(0.002, display_updater);
  else
    display_ticker.detach();
#endif

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 2000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}



void setup() {
 Serial.begin(115200);
  // Define your display layout here, e.g. 1/8 step
  display.begin(16);
  display.setDriverChip(FM6126A);

  // Define your scan pattern here {LINE, ZIGZAG, ZAGGIZ, WZAGZIG, VZAG} (default is LINE)
  //display.setScanPattern(LINE);

  // Define multiplex implemention here {BINARY, STRAIGHT} (default is BINARY)
  //display.setMuxPattern(BINARY);

  display.setFastUpdate(true);
  display.clearDisplay();
  //display.setTextColor(myCYAN);
  //display.setCursor(2,0);
  //display.print("Pixel");
  //display.setTextColor(myMAGENTA);
  //display.setCursor(2,8);
  //display.print("Time");
  display_update_enable(true);

  delay(3000);

  drawImage2(0, 0);

}


//Draw nhs image
void drawImage2(int x, int y)
{
 int imageHeight = 32;
 int imageWidth = 64;
 int counter = 0;
 for (int yy = 0; yy < imageHeight; yy++)
 {
   for (int xx = 0; xx < imageWidth; xx++)
   {
     display.drawPixel(xx + x , yy + y, nhs[counter]);
     counter++;
   }
 }
}


void loop()
{
//nothing to do
}
