#include "PxMatrix.h"

#ifdef ESP32

#define P_LAT 22
#define P_A 19
#define P_B 23
#define P_C 18
#define P_D 5
#define P_E 15
#define P_OE 2
hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

#endif

#ifdef ESP8266

#include <Ticker.h>
Ticker display_ticker;
#define P_LAT 16
#define P_A 5
#define P_B 4
#define P_C 15
#define P_D 12
#define P_E 0
#define P_OE 2

#endif
// Pins for LED MATRIX

#define matrix_width 64
#define matrix_height 32

// This defines the 'on' time of the display is us. The larger this number,
// the brighter the display. If too large the ESP will crash
uint8_t display_draw_time=50; //10-50 is usually fine

// PxMATRIX display(matrix_width,matrix_height,P_LAT, P_OE,P_A,P_B,P_C);
//PxMATRIX display(64,32,P_LAT, P_OE,P_A,P_B,P_C,P_D);
PxMATRIX display(matrix_width,matrix_height,P_LAT, P_OE,P_A,P_B,P_C,P_D,P_E);

// Some standard colors
uint16_t myRED = display.color565(255, 0, 0);
uint16_t myGREEN = display.color565(0, 255, 0);
uint16_t myBLUE = display.color565(0, 0, 255);
uint16_t myWHITE = display.color565(255, 255, 255);
uint16_t myYELLOW = display.color565(255, 255, 0);
uint16_t myCYAN = display.color565(0, 255, 255);
uint16_t myMAGENTA = display.color565(255, 0, 255);
uint16_t myBLACK = display.color565(0, 0, 0);

uint16_t myCOLORS[8]={myRED,myGREEN,myBLUE,myWHITE,myYELLOW,myCYAN,myMAGENTA,myBLACK};


// Converted using the following site: http://www.rinkydinkelectronics.com/t_imageconverter565.php
uint16_t static rainbow[] = {
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000,   // 0x0020 (32) pixels
0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0050 (80) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF800, 0xF000, 0xF800, 0xF000, 0xF000, 0xF000,   // 0x0060 (96) pixels
0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0070 (112) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0080 (128) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0090 (144) pixels
0x0000, 0x0000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF800, 0xF000, 0xF000, 0xF000, 0xE840, 0xE0A0, 0xD900, 0xD140, 0xD960, 0xD180,   // 0x00A0 (160) pixels
0xD180, 0xD960, 0xD140, 0xD8E0, 0xD8A0, 0xE040, 0xF000, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xF000, 0xF000, 0x0000, 0x0000,   // 0x00B0 (176) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00C0 (192) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00D0 (208) pixels
0xF000, 0xF000, 0xF000, 0xF000, 0xF800, 0xF000, 0xE060, 0xD920, 0xDA00, 0xDAC0, 0xEB40, 0xF3A0, 0xF3C0, 0xFBE0, 0xFBE0, 0xFC00,   // 0x00E0 (224) pixels
0xFC00, 0xFBE0, 0xFBE0, 0xF3C0, 0xEB80, 0xE340, 0xDAA0, 0xD1E0, 0xD900, 0xE060, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000, 0xF000,   // 0x00F0 (240) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000,   // 0x0110 (272) pixels
0xF000, 0xF000, 0xF800, 0xE840, 0xD920, 0xDA60, 0xEB60, 0xF3C0, 0xFC00, 0xFC00, 0xFBE0, 0xFBE0, 0xFBC0, 0xF3C0, 0xF3C0, 0xEBC0,   // 0x0120 (288) pixels
0xEBC0, 0xF3C0, 0xF3C0, 0xFBC0, 0xFBE0, 0xFBE0, 0xFC00, 0xFC00, 0xF3C0, 0xE340, 0xD240, 0xD100, 0xE820, 0xF800, 0xF800, 0xF000,   // 0x0130 (304) pixels
0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0140 (320) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF000, 0xF800,   // 0x0150 (336) pixels
0xF800, 0xE040, 0xD1A0, 0xE300, 0xF3C0, 0xFC00, 0xFC00, 0xFBC0, 0xEBC0, 0xE3E0, 0xDC40, 0xD4C0, 0xD560, 0xDDC0, 0xDE00, 0xDE20,   // 0x0160 (352) pixels
0xDE20, 0xDE00, 0xDDE0, 0xD560, 0xD4E0, 0xDC60, 0xE3E0, 0xEBC0, 0xFBC0, 0xFBE0, 0xFC00, 0xF3C0, 0xDAE0, 0xD160, 0xE040, 0xF800,   // 0x0170 (368) pixels
0xF800, 0xE820, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0180 (384) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xF000, 0xE820,   // 0x0190 (400) pixels
0xD160, 0xE320, 0xFBE0, 0xFC00, 0xFBE0, 0xEBC0, 0xDC00, 0xD4E0, 0xDE00, 0xE700, 0xF780, 0xFFE0, 0xFFE0, 0xFFE0, 0xFFE0, 0xFFE0,   // 0x01A0 (416) pixels
0xFFE0, 0xFFE0, 0xFFE0, 0xFFE0, 0xFFE0, 0xF7A0, 0xEF20, 0xDE40, 0xD520, 0xDC20, 0xEBC0, 0xFBE0, 0xFC00, 0xFBE0, 0xDB00, 0xD140,   // 0x01B0 (432) pixels
0xE800, 0xF800, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x01C0 (448) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xF800, 0xD8C0, 0xDAA0,   // 0x01D0 (464) pixels
0xF3E0, 0xFC00, 0xFBE0, 0xEBC0, 0xD460, 0xDDE0, 0xEF40, 0xFFE0, 0xFFE0, 0xFFE0, 0xFFC0, 0xF780, 0xDF60, 0xCF20, 0xBF00, 0xB700,   // 0x01E0 (480) pixels
0xB700, 0xBF00, 0xC720, 0xDF40, 0xEF80, 0xFFC0, 0xFFE0, 0xFFE0, 0xFFE0, 0xF760, 0xDE20, 0xD4A0, 0xEBC0, 0xFBE0, 0xFC00, 0xF3C0,   // 0x01F0 (496) pixels
0xD260, 0xD880, 0xF800, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0200 (512) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xF000, 0xD160, 0xEB60, 0xFC00,   // 0x0210 (528) pixels
0xFBE0, 0xF3C0, 0xD460, 0xDE20, 0xF7A0, 0xFFE0, 0xFFE0, 0xFFA0, 0xD720, 0x96E0, 0x66C0, 0x36E0, 0x1F20, 0x0F40, 0x0760, 0x0780,   // 0x0220 (544) pixels
0x0780, 0x0760, 0x0F40, 0x1F20, 0x3700, 0x56C0, 0x8EC0, 0xC720, 0xF7A0, 0xFFE0, 0xFFE0, 0xF7C0, 0xDE60, 0xD480, 0xEBC0, 0xFBE0,   // 0x0230 (560) pixels
0xFC00, 0xE340, 0xD120, 0xF000, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0240 (576) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF000, 0xE820, 0xD200, 0xF3C0, 0xFC00, 0xFBE0,   // 0x0250 (592) pixels
0xDBE0, 0xD580, 0xF780, 0xFFE0, 0xFFE0, 0xEF80, 0xA6E0, 0x4EC0, 0x1720, 0x07A0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0,   // 0x0260 (608) pixels
0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07C0, 0x1740, 0x3EC0, 0x96C0, 0xE760, 0xFFE0, 0xFFE0, 0xF7A0, 0xDDE0, 0xDC00,   // 0x0270 (624) pixels
0xFBE0, 0xFC00, 0xF3A0, 0xC9C0, 0xE800, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0280 (640) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xE820, 0xD240, 0xFBE0, 0xFC00, 0xF3C0, 0xD440,   // 0x0290 (656) pixels
0xE6A0, 0xFFE0, 0xFFE0, 0xF7A0, 0x9EC0, 0x36E0, 0x0780, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0740, 0x0682, 0x05A4, 0x04E6, 0x0488,   // 0x02A0 (672) pixels
0x0488, 0x04C7, 0x0585, 0x0642, 0x0720, 0x07C0, 0x07E0, 0x07E0, 0x07E0, 0x07A0, 0x2F00, 0x8EC0, 0xE760, 0xFFE0, 0xFFE0, 0xE6E0,   // 0x02B0 (688) pixels
0xD480, 0xF3C0, 0xFC00, 0xF3E0, 0xCA00, 0xE820, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x02C0 (704) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xE820, 0xD240, 0xFBE0, 0xFC00, 0xF3C0, 0xD4C0, 0xEF40,   // 0x02D0 (720) pixels
0xFFE0, 0xFFE0, 0xCF00, 0x4EA0, 0x0780, 0x07E0, 0x07E0, 0x07E0, 0x06E1, 0x0506, 0x02EE, 0x0175, 0x009A, 0x003C, 0x001E, 0x001E,   // 0x02E0 (736) pixels
0x001E, 0x001E, 0x003D, 0x007A, 0x0136, 0x0290, 0x0488, 0x0682, 0x07C0, 0x07E0, 0x07E0, 0x07A0, 0x36C0, 0xB6E0, 0xFFC0, 0xFFE0,   // 0x02F0 (752) pixels
0xF780, 0xD500, 0xEBC0, 0xFC00, 0xFBE0, 0xCA00, 0xE800, 0xF800, 0xE820, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0300 (768) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF800, 0xF000, 0xD200, 0xFBE0, 0xFC00, 0xF3C0, 0xCCE0, 0xF780, 0xFFE0,   // 0x0310 (784) pixels
0xFFC0, 0x9EA0, 0x1F00, 0x07E0, 0x07E0, 0x07E0, 0x0662, 0x038C, 0x0117, 0x001D, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F,   // 0x0320 (800) pixels
0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x001F, 0x001E, 0x00B8, 0x02CE, 0x05E3, 0x07C0, 0x07E0, 0x07E0, 0x0F40, 0x7EA0, 0xF7A0,   // 0x0330 (816) pixels
0xFFE0, 0xF7A0, 0xD540, 0xEBC0, 0xFC00, 0xF3C0, 0xC9A0, 0xF000, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0340 (832) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xD160, 0xF3C0, 0xFC00, 0xF3C0, 0xCCC0, 0xF780, 0xFFE0, 0xF7A0,   // 0x0350 (848) pixels
0x7E80, 0x0F40, 0x07E0, 0x07E0, 0x0720, 0x03CA, 0x00D8, 0x001F, 0x001F, 0x001F, 0x001E, 0x081C, 0x201B, 0x301B, 0x401B, 0x401B,   // 0x0360 (864) pixels
0x401B, 0x381B, 0x301B, 0x201B, 0x081C, 0x001E, 0x001F, 0x001F, 0x001F, 0x007A, 0x030D, 0x06A1, 0x07E0, 0x07E0, 0x0780, 0x5E80,   // 0x0370 (880) pixels
0xEF60, 0xFFE0, 0xF7C0, 0xD520, 0xF3C0, 0xFC00, 0xEBA0, 0xD120, 0xF800, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0380 (896) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xD8A0, 0xEB60, 0xFC00, 0xFBC0, 0xD460, 0xF760, 0xFFE0, 0xF7A0, 0x7680,   // 0x0390 (912) pixels
0x0780, 0x07E0, 0x07E0, 0x0603, 0x01D3, 0x001E, 0x001F, 0x001F, 0x081D, 0x281B, 0x501B, 0x681D, 0x781E, 0x801F, 0x801F, 0x801F,   // 0x03A0 (928) pixels
0x801F, 0x801F, 0x781F, 0x781E, 0x681D, 0x501B, 0x281A, 0x081C, 0x001F, 0x001F, 0x001F, 0x0136, 0x0526, 0x07E0, 0x07E0, 0x07A0,   // 0x03B0 (944) pixels
0x56A0, 0xEF80, 0xFFE0, 0xF780, 0xD4A0, 0xFBC0, 0xFC00, 0xE320, 0xD880, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03C0 (960) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0xF000, 0xF800, 0xE820, 0xDA80, 0xFC00, 0xFBE0, 0xD400, 0xE6E0, 0xFFE0, 0xFFC0, 0x8680, 0x0760,   // 0x03D0 (976) pixels
0x07E0, 0x07E0, 0x0546, 0x00F8, 0x001F, 0x001F, 0x001D, 0x281A, 0x601C, 0x781F, 0x801F, 0x801F, 0x781F, 0x781E, 0x785D, 0x787D,   // 0x03E0 (992) pixels
0x787D, 0x785D, 0x781E, 0x781F, 0x801F, 0x801F, 0x781E, 0x601B, 0x281A, 0x001D, 0x001F, 0x001F, 0x007B, 0x0429, 0x07A0, 0x07E0,   // 0x03F0 (1008) pixels
0x07A0, 0x66A0, 0xF7A0, 0xFFE0, 0xEF20, 0xDC20, 0xFBE0, 0xFC00, 0xD240, 0xE800, 0xF000, 0xF000, 0xF000, 0x0000, 0x0000, 0x0000,   // 0x0400 (1024) pixels
0x0000, 0x0000, 0x0000, 0xF000, 0xF800, 0xF800, 0xD140, 0xF3C0, 0xFC00, 0xEBC0, 0xD5E0, 0xFFE0, 0xFFE0, 0xA6A0, 0x0F20, 0x07E0,   // 0x0410 (1040) pixels
0x07E0, 0x04E6, 0x009A, 0x001F, 0x001F, 0x101B, 0x501B, 0x781E, 0x801F, 0x781F, 0x783D, 0x785D, 0x785D, 0x0000, 0x0000, 0x0000,   // 0x0420 (1056) pixels
0x0000, 0x0000, 0x0000, 0x785D, 0x785D, 0x783D, 0x781F, 0x801F, 0x781E, 0x481A, 0x101B, 0x001F, 0x001F, 0x003D, 0x03AA, 0x07A0,   // 0x0430 (1072) pixels
0x07E0, 0x0780, 0x86A0, 0xFFE0, 0xFFE0, 0xDE20, 0xEBC0, 0xFC00, 0xF3A0, 0xD100, 0xF800, 0xF800, 0xF000, 0x0000, 0x0000, 0x0000,   // 0x0440 (1088) pixels
0x0000, 0x0000, 0x0000, 0xF000, 0xF800, 0xE040, 0xE300, 0xFC00, 0xFBC0, 0xCCA0, 0xF7A0, 0xFFE0, 0xD720, 0x26A0, 0x07E0, 0x07E0,   // 0x0450 (1104) pixels
0x0585, 0x00B9, 0x001F, 0x001F, 0x181B, 0x601C, 0x801F, 0x801F, 0x783E, 0x785D, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0460 (1120) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x785D, 0x783D, 0x801F, 0x801F, 0x601B, 0x181A, 0x001F, 0x001F, 0x003C, 0x0449,   // 0x0470 (1136) pixels
0x07E0, 0x07E0, 0x1720, 0xBEE0, 0xFFE0, 0xFFC0, 0xD4C0, 0xFBC0, 0xFC00, 0xDAC0, 0xE820, 0xF800, 0xF000, 0xF000, 0x0000, 0x0000,   // 0x0480 (1152) pixels
0x0000, 0x0000, 0xF000, 0xF000, 0xF800, 0xD160, 0xFBE0, 0xFBE0, 0xE3C0, 0xE6A0, 0xFFE0, 0xFFA0, 0x6640, 0x07C0, 0x07E0, 0x06A2,   // 0x0490 (1168) pixels
0x0156, 0x001F, 0x001F, 0x181B, 0x681C, 0x801F, 0x781F, 0x78DC, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x04A0 (1184) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x785D, 0x78FC, 0x781F, 0x801F, 0x681C, 0x181A, 0x001F, 0x001F, 0x009A,   // 0x04B0 (1200) pixels
0x0585, 0x07E0, 0x07E0, 0x46A0, 0xEF80, 0xFFE0, 0xE6C0, 0xE3E0, 0xFBE0, 0xF3C0, 0xD120, 0xF800, 0xF800, 0xF000, 0x0000, 0x0000,   // 0x04C0 (1216) pixels
0x0000, 0x0000, 0xF000, 0xF800, 0xE820, 0xDAC0, 0xFC00, 0xFBC0, 0xCCC0, 0xFFC0, 0xFFE0, 0xBEA0, 0x0F00, 0x07E0, 0x07A0, 0x02EE,   // 0x04D0 (1232) pixels
0x001F, 0x001F, 0x101B, 0x601C, 0x801F, 0x781F, 0x817B, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x04E0 (1248) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x817B, 0x781F, 0x801F, 0x601B, 0x081B, 0x001F, 0x001F,   // 0x04F0 (1264) pixels
0x0194, 0x0701, 0x07E0, 0x0780, 0x9EA0, 0xFFE0, 0xFFE0, 0xD4E0, 0xFBC0, 0xFC00, 0xD280, 0xE800, 0xF800, 0xF000, 0x0000, 0x0000,   // 0x0500 (1280) pixels
0x0000, 0x0000, 0xF000, 0xF800, 0xD8E0, 0xF3A0, 0xFC00, 0xE3C0, 0xDE60, 0xFFE0, 0xFFA0, 0x5640, 0x07E0, 0x07E0, 0x0565, 0x005C,   // 0x0510 (1296) pixels
0x001F, 0x001D, 0x501B, 0x801F, 0x781F, 0x813B, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0520 (1312) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x815B, 0x781F, 0x801F, 0x481A, 0x001D, 0x001F,   // 0x0530 (1328) pixels
0x001E, 0x03CA, 0x07E0, 0x07E0, 0x3EC0, 0xEF80, 0xFFE0, 0xDE80, 0xE3C0, 0xFC00, 0xEB80, 0xD8A0, 0xF800, 0xE820, 0xF000, 0x0000,   // 0x0540 (1344) pixels
0x0000, 0xF000, 0xF000, 0xF800, 0xD200, 0xFC00, 0xFBE0, 0xD440, 0xF780, 0xFFE0, 0xC6C0, 0x16E0, 0x07E0, 0x0780, 0x0231, 0x001F,   // 0x0550 (1360) pixels
0x001F, 0x281A, 0x781E, 0x801F, 0x789C, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0560 (1376) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x789C, 0x801F, 0x781E, 0x2819, 0x001F,   // 0x0570 (1392) pixels
0x001F, 0x00F8, 0x06A2, 0x07E0, 0x0760, 0xAEC0, 0xFFE0, 0xF7A0, 0xD460, 0xFBE0, 0xFBE0, 0xC9A0, 0xF800, 0xF800, 0xF000, 0x0000,   // 0x0580 (1408) pixels
0x0000, 0xF000, 0xF800, 0xE820, 0xE300, 0xFC00, 0xF3C0, 0xD560, 0xFFE0, 0xFFE0, 0x7E40, 0x07A0, 0x07E0, 0x05A4, 0x005C, 0x001F,   // 0x0590 (1424) pixels
0x081C, 0x601C, 0x801F, 0x781E, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x05A0 (1440) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x781E, 0x801F, 0x601B, 0x081C,   // 0x05B0 (1456) pixels
0x001F, 0x001F, 0x040A, 0x07E0, 0x07E0, 0x5EA0, 0xFFC0, 0xFFE0, 0xD560, 0xF3C0, 0xFC00, 0xDAA0, 0xE800, 0xF800, 0xF000, 0x0000,   // 0x05C0 (1472) pixels
0x0000, 0xF000, 0xF800, 0xD8A0, 0xEBA0, 0xFC00, 0xE3C0, 0xDE80, 0xFFE0, 0xEF60, 0x3640, 0x07E0, 0x07E0, 0x032D, 0x001F, 0x001F,   // 0x05D0 (1488) pixels
0x281A, 0x781F, 0x801F, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x05E0 (1504) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x815B, 0x801F, 0x781E, 0x2819,   // 0x05F0 (1520) pixels
0x001F, 0x001F, 0x0194, 0x0740, 0x07E0, 0x26E0, 0xDF40, 0xFFE0, 0xE680, 0xE3C0, 0xFC00, 0xEB60, 0xD880, 0xF800, 0xF000, 0x0000,   // 0x0600 (1536) pixels
0xF000, 0xF000, 0xF800, 0xD160, 0xFBE0, 0xFBE0, 0xD400, 0xEF60, 0xFFE0, 0xCEC0, 0x16E0, 0x07E0, 0x0720, 0x0156, 0x001F, 0x001D,   // 0x0610 (1552) pixels
0x501B, 0x801F, 0x781E, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0620 (1568) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x781E, 0x801F, 0x501A,   // 0x0630 (1584) pixels
0x001D, 0x001F, 0x005C, 0x05C4, 0x07E0, 0x0760, 0xAEE0, 0xFFE0, 0xEF60, 0xDC20, 0xFBE0, 0xF3C0, 0xD100, 0xF800, 0xF000, 0xF000,   // 0x0640 (1600) pixels
0xF000, 0xF800, 0xF800, 0xD200, 0xFC00, 0xFBE0, 0xCCA0, 0xFFC0, 0xFFE0, 0x9640, 0x0760, 0x07E0, 0x05E4, 0x005C, 0x001F, 0x101B,   // 0x0650 (1616) pixels
0x701D, 0x801F, 0x789C, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0660 (1632) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x78BC, 0x801F, 0x681D,   // 0x0670 (1648) pixels
0x101B, 0x001F, 0x001F, 0x03EA, 0x07E0, 0x07C0, 0x7EA0, 0xFFE0, 0xFFC0, 0xD4A0, 0xFBE0, 0xFC00, 0xD1A0, 0xF800, 0xF800, 0xF000,   // 0x0680 (1664) pixels
0xF000, 0xF800, 0xF000, 0xDAA0, 0xFC00, 0xF3C0, 0xD540, 0xFFE0, 0xFFE0, 0x6E20, 0x07C0, 0x07E0, 0x0449, 0x001F, 0x001F, 0x281A,   // 0x0690 (1680) pixels
0x781F, 0x781F, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x06A0 (1696) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x781F, 0x781E,   // 0x06B0 (1712) pixels
0x201A, 0x001F, 0x001F, 0x0271, 0x07C0, 0x07E0, 0x56A0, 0xFFC0, 0xFFE0, 0xD520, 0xFBC0, 0xFC00, 0xD240, 0xF000, 0xF800, 0xF000,   // 0x06C0 (1728) pixels
0xF000, 0xF800, 0xE820, 0xE300, 0xFC00, 0xF3C0, 0xD5E0, 0xFFE0, 0xFFA0, 0x4E20, 0x07E0, 0x07E0, 0x030E, 0x001F, 0x001E, 0x401A,   // 0x06D0 (1744) pixels
0x801F, 0x781F, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x06E0 (1760) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x781F, 0x801F,   // 0x06F0 (1776) pixels
0x381A, 0x001F, 0x001F, 0x0156, 0x0740, 0x07E0, 0x36C0, 0xEF80, 0xFFE0, 0xD5C0, 0xF3C0, 0xFC00, 0xDAC0, 0xE800, 0xF800, 0xF000,   // 0x0700 (1792) pixels
0xF000, 0xF800, 0xE060, 0xE340, 0xFC00, 0xEBC0, 0xDE60, 0xFFE0, 0xEF60, 0x3640, 0x07E0, 0x07C0, 0x0231, 0x001F, 0x001D, 0x501B,   // 0x0710 (1808) pixels
0x801F, 0x781E, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0720 (1824) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x781E, 0x801F,   // 0x0730 (1840) pixels
0x481A, 0x001E, 0x001F, 0x00B9, 0x06A2, 0x07E0, 0x1F00, 0xE740, 0xFFE0, 0xDE20, 0xEBC0, 0xFC00, 0xDB00, 0xE020, 0xF800, 0xF000,   // 0x0740 (1856) pixels
0xF000, 0xF800, 0xE080, 0xEB80, 0xFC00, 0xE3C0, 0xDEA0, 0xFFE0, 0xE720, 0x2660, 0x07E0, 0x0760, 0x01B4, 0x001F, 0x001D, 0x601C,   // 0x0750 (1872) pixels
0x801F, 0x785D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0760 (1888) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x785D, 0x801F,   // 0x0770 (1904) pixels
0x581B, 0x001D, 0x001F, 0x005B, 0x0603, 0x07E0, 0x1700, 0xD720, 0xFFE0, 0xE680, 0xEBC0, 0xFC00, 0xE340, 0xE040, 0xF800, 0xF000,   // 0x0780 (1920) pixels
0xE020, 0xF800, 0xD8A0, 0xEBA0, 0xFC00, 0xE3E0, 0xE6E0, 0xFFE0, 0xDF00, 0x1E80, 0x07E0, 0x0760, 0x0176, 0x001F, 0x081C, 0x681C,   // 0x0790 (1936) pixels
0x801F, 0x789D, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07A0 (1952) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x789D, 0x801F,   // 0x07B0 (1968) pixels
0x601C, 0x001D, 0x001F, 0x003D, 0x05A5, 0x07E0, 0x0F40, 0xCF20, 0xFFE0, 0xE6A0, 0xE3C0, 0xFC00, 0xE360, 0xD860, 0xF800, 0xF000,   // 0x07C0 (1984) pixels
0xC020, 0xE020, 0xC0A0, 0xD340, 0xE3A0, 0xC360, 0xCE20, 0xE720, 0xC621, 0x1DC1, 0x0720, 0x0660, 0x0134, 0x001C, 0x0818, 0x5819,   // 0x07D0 (2000) pixels
0x701C, 0x70B9, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x07E0 (2016) pixels
0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x70B9, 0x701C,   // 0x07F0 (2032) pixels
0x5819, 0x0019, 0x001C, 0x001A, 0x04C5, 0x0720, 0x1661, 0xAE01, 0xE701, 0xC5C1, 0xC360, 0xE3A0, 0xCB20, 0xC080, 0xE020, 0xF000,   // 0x0800 (2048) pixels
};








#ifdef ESP8266
// ISR for display refresh
void display_updater()
{
  display.display(display_draw_time);
}
#endif

#ifdef ESP32
void IRAM_ATTR display_updater(){
  // Increment the counter and set the time of ISR
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}
#endif


void display_update_enable(bool is_enable)
{

#ifdef ESP8266
  if (is_enable)
    display_ticker.attach(0.002, display_updater);
  else
    display_ticker.detach();
#endif

#ifdef ESP32
  if (is_enable)
  {
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 2000, true);
    timerAlarmEnable(timer);
  }
  else
  {
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
#endif
}



void setup() {
 Serial.begin(115200);
  // Define your display layout here, e.g. 1/8 step
  display.begin(16);
  display.setDriverChip(FM6126A);

  // Define your scan pattern here {LINE, ZIGZAG, ZAGGIZ, WZAGZIG, VZAG} (default is LINE)
  //display.setScanPattern(LINE);

  // Define multiplex implemention here {BINARY, STRAIGHT} (default is BINARY)
  //display.setMuxPattern(BINARY);

  display.setFastUpdate(true);
  display.clearDisplay();
  //display.setTextColor(myCYAN);
  //display.setCursor(2,0);
  //display.print("Pixel");
  //display.setTextColor(myMAGENTA);
  //display.setCursor(2,8);
  //display.print("Time");
  display_update_enable(true);

  delay(3000);

  drawImage2(0, 0);

}


//Draw rainbow image
void drawImage2(int x, int y)
{
 int imageHeight = 32;
 int imageWidth = 64;
 int counter = 0;
 for (int yy = 0; yy < imageHeight; yy++)
 {
   for (int xx = 0; xx < imageWidth; xx++)
   {
     display.drawPixel(xx + x , yy + y, rainbow[counter]);
     counter++;
   }
 }
}


void loop()
{
//nothing to do
}
